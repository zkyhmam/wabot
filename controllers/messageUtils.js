const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
require('dotenv').config();

const externalAdTitle = process.env.EXTERNAL_AD_TITLE || 'ŸÖÿ∑Ÿàÿ± ü§ñ Zaky AI ü§ñ';
const externalAdBody = process.env.EXTERNAL_AD_BODY || 'ŸÑŸÑŸÖÿ≥ÿßÿπÿØÿ© ÿ£Ÿà ÿßŸÑÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ±ÿßÿ™';
const externalAdMediaType = parseInt(process.env.EXTERNAL_AD_MEDIA_TYPE) || 2;
const externalAdThumbnailPath = process.env.EXTERNAL_AD_THUMBNAIL_PATH || path.join(__dirname, '..', 'assets', 'zakyai.jpg');
const mediaUrl = process.env.EXTERNAL_AD_MEDIA_URL || 'https://wa.me/201280779419';
const sourceUrl = process.env.EXTERNAL_AD_SOURCE_URL || 'https://wa.me/201280779419';
const botSignature = process.env.BOT_SIGNATURE || "ÿ™ÿ≠Ÿäÿßÿ™Ÿä Zaky ñ§ç";

let externalAdThumbnail;
try {
    externalAdThumbnail = fs.readFileSync(externalAdThumbnailPath);
} catch (error) {
    console.warn(`‚ö†Ô∏è ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑÿµŸàÿ±ÿ© ÿßŸÑŸÖÿµÿ∫ÿ±ÿ© ŸÅŸä ÿßŸÑŸÖÿ≥ÿßÿ±: ${externalAdThumbnailPath}. ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿµŸàÿ±ÿ© ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ© ÿ®ÿØŸäŸÑÿ©.`);
    externalAdThumbnail = null;
}

const createAdContext = (customTitle = externalAdTitle) => ({
    forwardingScore: 999,
    isForwarded: true,
    externalAdReply: {
        title: customTitle,
        body: externalAdBody,
        mediaType: externalAdMediaType,
        thumbnail: externalAdThumbnail,
        mediaUrl: mediaUrl,
        sourceUrl: sourceUrl
    }
});

const sendErrorMessage = async (sock, chatId, text, customTitle = externalAdTitle, quoted = null) => {
    const message = {
        text,
        contextInfo: createAdContext(customTitle)
    };

    await sock.sendMessage(chatId, message, quoted ? { quoted } : {}).catch(err => {
        console.error(`‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿÆÿ∑ÿ£: ${err.message}`);
    });
};

const sendStickerCreationSuccessMessage = async (sock, chatId, customText = '‚úÖ ÿ™ŸÖ ÿπŸÖŸÑ ÿßŸÑŸÖŸÑÿµŸÇ ÿ®ŸÜÿ¨ÿßÿ≠ üéâ', quoted = null) => {
    const message = {
        text: customText,
        contextInfo: createAdContext()
    };

    await sock.sendMessage(chatId, message, quoted ? { quoted } : {}).catch(err => {
        console.error(`‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßŸÑÿ© ŸÜÿ¨ÿßÿ≠ ÿßŸÑŸÖŸÑÿµŸÇ: ${err.message}`);
    });
};

const sendText = async (sock, chatId, text, quoted = null, withAd = false) => {
    const message = withAd
        ? { text, contextInfo: createAdContext() }
        : { text };

    await sock.sendMessage(chatId, message, quoted ? { quoted } : {}).catch(err => {
        console.error(`‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑŸÜÿµ: ${err.message}`);
    });
};

const sendFormattedMessage = async (sock, chatId, messageText, emoji = 'üöÄ', quoted = null, withAd = false) => {
    const formattedMessage = `*${messageText}* ${emoji}`;

    const message = withAd
        ? { text: formattedMessage, contextInfo: createAdContext() }
        : { text: formattedMessage };

    return sock.sendMessage(chatId, message, quoted ? { quoted } : {}).catch(err => {
        console.error(`‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑŸÖŸÜÿ≥ŸÇÿ©: ${err.message}`);
        return null;
    });
};

const sendImage = async (sock, chatId, image, caption = '', quoted = null) => {
    try {
        let imageData;

        if (typeof image === 'string' && (image.startsWith('http://') || image.startsWith('https://'))) {
            imageData = { url: image };
        } else {
            imageData = image;
        }

        const message = {
            image: imageData,
            caption: caption ? `${caption}\n\n${botSignature}` : botSignature
        };

        return await sock.sendMessage(chatId, message, quoted ? { quoted } : {});
    } catch (error) {
        console.error(`‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿµŸàÿ±ÿ©: ${error.message}`);
        await sendErrorMessage(sock, chatId, "‚ö†Ô∏è ÿ≠ÿµŸÑ ŸÖÿ¥ŸÉŸÑÿ© Ÿàÿ£ŸÜÿß ÿ®ÿ®ÿπÿ™ ÿßŸÑÿµŸàÿ±ÿ© üòï ÿ¨ÿ±ÿ® ÿ™ÿßŸÜŸä üîÑ", null, quoted);
        return null;
    }
};

const sendMedia = async (sock, chatId, media, type, caption = '', filename = '', quoted = null) => {
    try {
        let mediaData;

        if (typeof media === 'string' && (media.startsWith('http://') || media.startsWith('https://'))) {
            mediaData = { url: media };
        } else {
            mediaData = media;
        }

        const message = {};

        switch (type.toLowerCase()) {
            case 'audio':
                message.audio = mediaData;
                message.mimetype = 'audio/mp4';
                message.ptt = false;
                break;

            case 'voice':
                message.audio = mediaData;
                message.mimetype = 'audio/ogg; codecs=opus';
                message.ptt = true;
                break;

            case 'video':
                message.video = mediaData;
                message.caption = caption ? `${caption}\n\n${botSignature}` : botSignature;
                message.gifPlayback = false;
                break;

            case 'gif':
                message.video = mediaData;
                message.caption = caption ? `${caption}\n\n${botSignature}` : botSignature;
                message.gifPlayback = true;
                break;

            case 'document':
                message.document = mediaData;
                message.mimetype = 'application/pdf';
                message.fileName = filename || 'document.pdf';
                message.caption = caption ? `${caption}\n\n${botSignature}` : botSignature;
                break;

            default:
                throw new Error(`ŸÜŸàÿπ Ÿàÿ≥ÿßÿ¶ÿ∑ ŸÖÿ¥ ŸÖÿØÿπŸàŸÖ: ${type}`);
        }

        return await sock.sendMessage(chatId, message, quoted ? { quoted } : {});
    } catch (error) {
        console.error(`‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑŸàÿ≥ÿßÿ¶ÿ∑ (${type}): ${error.message}`);
        await sendErrorMessage(sock, chatId, `‚ö†Ô∏è ÿ≠ÿµŸÑ ŸÖÿ¥ŸÉŸÑÿ© Ÿàÿ£ŸÜÿß ÿ®ÿ®ÿπÿ™ ${type} üòï ÿ¨ÿ±ÿ® ÿ™ÿßŸÜŸä üîÑ`, null, quoted);
        return null;
    }
};

const sendPoll = async (sock, chatId, title, options, quoted = null) => {
    try {
        const message = {
            poll: {
                name: title,
                values: options,
                selectableCount: 1
            }
        };

        return await sock.sendMessage(chatId, message, quoted ? { quoted } : {});
    } catch (error) {
        console.error(`‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿßÿ≥ÿ™ÿ∑ŸÑÿßÿπ: ${error.message}`);
        await sendErrorMessage(sock, chatId, "‚ö†Ô∏è ÿ≠ÿµŸÑ ŸÖÿ¥ŸÉŸÑÿ© Ÿàÿ£ŸÜÿß ÿ®ÿπŸÖŸÑ ÿßŸÑÿßÿ≥ÿ™ÿ∑ŸÑÿßÿπ üòï ÿ¨ÿ±ÿ® ÿ™ÿßŸÜŸä üîÑ", null, quoted);
        return null;
    }
};

const sendLocation = async (sock, chatId, latitude, longitude, name = '', address = '', quoted = null) => {
    try {
        const message = {
            location: {
                degreesLatitude: latitude,
                degreesLongitude: longitude,
                name: name,
                address: address
            }
        };

        return await sock.sendMessage(chatId, message, quoted ? { quoted } : {});
    } catch (error) {
        console.error(`‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑŸÖŸàŸÇÿπ: ${error.message}`);
        await sendErrorMessage(sock, chatId, "‚ö†Ô∏è ÿ≠ÿµŸÑ ŸÖÿ¥ŸÉŸÑÿ© Ÿàÿ£ŸÜÿß ÿ®ÿ®ÿπÿ™ ÿßŸÑŸÖŸàŸÇÿπ üòï ÿ¨ÿ±ÿ® ÿ™ÿßŸÜŸä üîÑ", null, quoted);
        return null;
    }
};

const sendContact = async (sock, chatId, vcard, displayName, quoted = null) => {
    try {
        const message = {
            contacts: {
                displayName: displayName,
                contacts: [{ vcard }]
            }
        };

        return await sock.sendMessage(chatId, message, quoted ? { quoted } : {});
    } catch (error) {
        console.error(`‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ¨Ÿáÿ© ÿßŸÑÿßÿ™ÿµÿßŸÑ: ${error.message}`);
        await sendErrorMessage(sock, chatId, "‚ö†Ô∏è ÿ≠ÿµŸÑ ŸÖÿ¥ŸÉŸÑÿ© Ÿàÿ£ŸÜÿß ÿ®ÿ®ÿπÿ™ ÿ¨Ÿáÿ© ÿßŸÑÿßÿ™ÿµÿßŸÑ üòï ÿ¨ÿ±ÿ® ÿ™ÿßŸÜŸä üîÑ", null, quoted);
        return null;
    }
};

const sendButtons = async (sock, chatId, text, footer = '', buttons = [], quoted = null) => {
    try {
        const message = {
            text: text,
            footer: footer || botSignature,
            buttons: buttons,
            headerType: 1
        };

        return await sock.sendMessage(chatId, message, quoted ? { quoted } : {});
    } catch (error) {
        console.error(`‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ±: ${error.message}`);
        return await sendText(sock, chatId, `${text}\n\n${footer || botSignature}`, quoted);
    }
};

const sendQuickReplies = async (sock, chatId, text, quickReplies = [], quoted = null) => {
    try {
        const buttons = quickReplies.map((reply, index) => ({
            buttonId: `qr_${index}`,
            buttonText: { displayText: reply },
            type: 1
        }));

        return await sendButtons(sock, chatId, text, '', buttons, quoted);
    } catch (error) {
        console.error(`‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿØŸàÿØ ÿßŸÑÿ≥ÿ±Ÿäÿπÿ©: ${error.message}`);
        return await sendText(sock, chatId, text, quoted);
    }
};

const sendWithAd = async (sock, chatId, text, adInfo = {}, quoted = null) => {
    try {
        const customAd = {
            title: adInfo.title || externalAdTitle,
            body: adInfo.body || externalAdBody,
            mediaType: adInfo.mediaType || externalAdMediaType,
            thumbnail: adInfo.thumbnail || externalAdThumbnail,
            mediaUrl: adInfo.mediaUrl || mediaUrl,
            sourceUrl: adInfo.sourceUrl || sourceUrl
        };

        const message = {
            text,
            contextInfo: {
                forwardingScore: 999,
                isForwarded: true,
                externalAdReply: customAd
            }
        };

        return await sock.sendMessage(chatId, message, quoted ? { quoted } : {});
    } catch (error) {
        console.error(`‚ùå ŸÅÿ¥ŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ŸÖÿπ ÿßŸÑÿ•ÿπŸÑÿßŸÜ: ${error.message}`);
        return await sendText(sock, chatId, text, quoted);
    }
};

module.exports = {
    sendErrorMessage,
    sendStickerCreationSuccessMessage,
    sendText,
    sendFormattedMessage,
    sendImage,
    sendMedia,
    sendPoll,
    sendLocation,
    sendContact,
    sendButtons,
    sendQuickReplies,
    sendWithAd,
    BOT_SIGNATURE: botSignature,
    createAdContext
};
